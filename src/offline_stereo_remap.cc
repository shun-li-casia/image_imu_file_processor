/*******************************************************************************
 *   Copyright (C) 2023 CASIA. All rights reserved.
 *
 *   @Filename: offline_stereo_remap.cc
 *
 *   @Author: shun li
 *
 *   @Email: shun.li.at.casia@outlook.com
 *
 *   @Date: 25/12/2023
 *
 *   @Description:
 *
 *******************************************************************************/

#include "utility_tool/cmdline.h"
#include "utility_tool/print_ctrl_macro.h"
#include "utility_tool/pcm_debug_helper.h"

#include "sensor_config/camera_models_kalibr.h"
#include "image_algorithm/stereo_rectifier.h"

#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <errno.h>
#include <string.h>

void WriteMap(FILE* fid, const cv::Mat& map1, const cv::Mat& map2,
              int img_width, int img_height) {
  if (fid == NULL) {
    PCM_PRINT_ERROR("file is not open!\n");
    return;
  }

  float x, y;
  int x_int, y_int;
  for (int i = 0; i < img_height; i++) {
    for (int j = 0; j < img_width; j++) {
      x = map1.at<float>(i, j);
      y = map2.at<float>(i, j);

      x_int = (int)(x * 4 + 0.5);  // TODO: may need modify
      y_int = (int)(y * 4 + 0.5);

      fwrite(&x_int, sizeof(CV_32S), 1, fid);
      fwrite(&y_int, sizeof(CV_32S), 1, fid);
      // fprintf(fid, "%d", x_int);
      // fprintf(fid, "%d", y_int);
    }
  }
  return;
}

int main(int argc, char** argv) {
  cmdline::parser par;

  par.add<std::string>("stereo_calibra_files", 0,
                       "raw stereo calibration files, generated by kalibr",
                       true);
  par.parse_check(argc, argv);

  const std::string stereo_calibra_files =
      par.get<std::string>("stereo_calibra_files");
  std::stringstream calib_ss(stereo_calibra_files);
  std::string tmp_calib;
  std::vector<std::string> calib_files;
  while (std::getline(calib_ss, tmp_calib, ',')) {
    calib_files.push_back(tmp_calib);
  }

  const int num_of_stereo = calib_files.size();

  std::vector<sensor_config::ImgImuConfig> config;
  config.resize(num_of_stereo);
  for (int i = 0; i < num_of_stereo; ++i) {
    sensor_config::ImgImuConfig& c = config[i];
    PCM_PRINT_INFO("read raw stereo calibration from %s \n",
                   calib_files[i].c_str());
    sensor_config::ConfigManager::ReadKalibr(calib_files[i], &c);
  }

  std::vector<std::pair<cv::Mat, cv::Mat>> stereo_maps;

  FILE* fid = NULL;

  for (int i = 0; i < num_of_stereo; ++i) {
    Eigen::Matrix3d rect_r_rl;
    Eigen::Vector3d rect_t_rl;
    sensor_config::PinholeCamera::Parameters& l_cam = config[i].cam_params_[0];
    sensor_config::PinholeCamera::Parameters& r_cam = config[i].cam_params_[1];
    std::pair<cv::Mat, cv::Mat> l_map, r_map;

    // apply the rect
    image_algorithm::StereoRectifier::RectStereoParam(
        config[i].r_rl_, config[i].t_rl_, &rect_r_rl, &rect_t_rl, &l_cam,
        &r_cam, &l_map, &r_map);
    config[i].r_rl_ = rect_r_rl;
    config[i].t_rl_ = rect_t_rl;
    stereo_maps.push_back(l_map);
    stereo_maps.push_back(r_map);

    int img_width = config[i].cam_params_[0].img_w(),
        img_height = config[i].cam_params_[0].img_h();

    cv::Mat l_map1 = l_map.first, l_map2 = l_map.second;
    for (int i = 0; i < img_height; i++) {
      for (int j = 0; j < img_width; j++) {
        if (l_map1.at<float>(i, j) < 0) l_map1.at<float>(i, j) = 0;
        if (l_map1.at<float>(i, j) >= img_width)
          l_map1.at<float>(i, j) = (float)(img_width - 1);
        if (l_map2.at<float>(i, j) < 0) l_map2.at<float>(i, j) = 0;
        if (l_map2.at<float>(i, j) >= img_height)
          l_map2.at<float>(i, j) = (float)(img_height - 1);
      }
    }
    fid = fopen("left_map.txt", "wb");
    if (fid == NULL) {
      PCM_PRINT_ERROR("can not open left.txt\n");
      return -1;
    }
    WriteMap(fid, l_map1, l_map2, img_width, img_height);

    if (fid != NULL) fclose(fid);

    cv::Mat r_map1 = r_map.first, r_map2 = r_map.second;
    for (int i = 0; i < img_height; i++) {
      for (int j = 0; j < img_width; j++) {
        if (r_map1.at<float>(i, j) < 0) r_map1.at<float>(i, j) = 0;
        if (r_map1.at<float>(i, j) >= img_width)
          r_map1.at<float>(i, j) = (float)(img_width - 1);
        if (r_map2.at<float>(i, j) < 0) r_map2.at<float>(i, j) = 0;
        if (r_map2.at<float>(i, j) >= img_height)
          r_map2.at<float>(i, j) = (float)(img_height - 1);
      }
    }
    fid = fopen("right_map.txt", "wb");
    if (fid == NULL) {
      PCM_PRINT_ERROR("can not open right.txt\n");
      return -1;
    }
    WriteMap(fid, r_map1, r_map2, img_width, img_height);
    fclose(fid);
  }

  return 0;
}
